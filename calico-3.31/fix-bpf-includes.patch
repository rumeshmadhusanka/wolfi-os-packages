Upstream clone libbpf into their build environment, but we want to use our
system libraries.

Additionally, upstream use a private symbol from the libbpf clone which, as
it's pretty small, we just inline here to sidestep the issue.

---
diff --git a/felix/bpf-gpl/Makefile b/felix/bpf-gpl/Makefile
index 8d89a4c..070637f 100644
--- a/felix/bpf-gpl/Makefile
+++ b/felix/bpf-gpl/Makefile
@@ -37,9 +37,7 @@ CFLAGS +=  \
 # distribution with the right kernel headers and recent libbpf package.
 # That's tricky because go-build is based on the upstream images
 # from the go team, and they don't provide anything newer.
-CFLAGS +=  \
-	-I ./libbpf/src/ \
-	-I ./libbpf/include/uapi
+CFLAGS += -I/usr/include/bpf
 
 # Workaround for Debian placing "asm/types.h" in /usr/include/x86_64-linux-gnu
 # We also pick up a couple of other definitions from here, such as the socket
diff --git a/felix/bpf/libbpf/libbpf_api.h b/felix/bpf/libbpf/libbpf_api.h
index d7046b0..e9efc3a 100644
--- a/felix/bpf/libbpf/libbpf_api.h
+++ b/felix/bpf/libbpf/libbpf_api.h
@@ -20,7 +20,6 @@
 #include <errno.h>
 #include "globals.h"
 #include "ip_addr.h"
-#include "str_error.h"
 #include <stdio.h>
 #include <unistd.h>
 #include <string.h>
@@ -496,6 +495,16 @@ int num_possible_cpu()
     return libbpf_num_possible_cpus();
 }
 
+#define STRERR_BUFSIZE  128
+
+char *vendored_libbpf_strerror_r(int err, char *dst, int len)
+{
+	int ret = strerror_r(err < 0 ? -err : err, dst, len);
+	if (ret)
+		snprintf(dst, len, "ERROR: strerror_r(%d)=%d", err, ret);
+	return dst;
+}
+
 int create_bpf_map(enum bpf_map_type type, unsigned int key_size, unsigned int value_size,
                    unsigned int max_entries, unsigned int flags, const char *name)
 {
@@ -510,7 +519,7 @@ int create_bpf_map(enum bpf_map_type type, unsigned int key_size, unsigned int v
 		char *cp, errmsg[STRERR_BUFSIZE];
 
 		err = -errno;
-		cp = libbpf_strerror_r(err, errmsg, sizeof(errmsg));
+		cp = vendored_libbpf_strerror_r(err, errmsg, sizeof(errmsg));
 		printf("libbpf warn: Error in bpf_map_create(%s):%s(%d).\n", name, cp, err);
 	}
 	return fd;
